import os
import re
import zipfile
import shutil
import tempfile
import xml.etree.ElementTree as ET
import tkinter as tk
from tkinter import filedialog, messagebox
from ttkbootstrap import Style
from ttkbootstrap.widgets import Treeview, Button
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import PatternFill
import webbrowser
import logging


def log_message(text_widget, message, level="INFO"):
    def open_url(url):
        webbrowser.open_new(url)

    text_widget.config(state="normal")
    if level == "INFO":
        logging.info(message)
    elif level == "WARNING":
        logging.warning(message)
    elif level == "ERROR":
        logging.error(message)

    if "http" in message:
        parts = message.split("http", 1)
        text_widget.insert("end", parts[0])
        url = "http" + parts[1]
        tag_name = f"link_{len(message)}"
        text_widget.insert("end", url + "\n", tag_name)
        text_widget.tag_config(tag_name, foreground="white", underline=True)
        text_widget.tag_bind(tag_name, "<Button-1>", lambda e, link=url: open_url(link))
    else:
        text_widget.insert("end", message + "\n")

    text_widget.config(state="disabled")
    text_widget.see("end")
    text_widget.update()

class SalesParserApp:
    def __init__(self, root):
        self.root = root
        self.root.title("XML –ü–∞—Ä—Å–µ—Ä –ú–∞—Ä—ñ—è-304–¢3")
        self.style = Style("superhero")
        self.sales_data = []
        self.temp_dir = None

        self.frame = tk.Frame(self.root)
        self.frame.pack(pady=10)

        self.select_btn = Button(self.frame, text="–û–±—Ä–∞—Ç–∏ ZIP", bootstyle="warning", command=self.select_zip)
        self.select_btn.grid(row=0, column=0, padx=10)

        self.export_btn = Button(self.frame, text="–ï–∫—Å–ø–æ—Ä—Ç –≤ Excel", bootstyle="success", command=self.export_to_excel, state="disabled")
        self.export_btn.grid(row=0, column=1, padx=10)

        self.progress_var = tk.DoubleVar()
        self.progress = tk.ttk.Progressbar(self.root, variable=self.progress_var, maximum=100)
        self.progress.pack(fill="x", padx=10, pady=(0, 5))

        self.tree = Treeview(self.root, columns=("date", "time", "check", "name", "amount", "type"), show="headings", height=15)

        self.tree.heading("date", text="–î–∞—Ç–∞")
        self.tree.column("date", width=90, anchor="center")

        self.tree.heading("time", text="–ß–∞—Å")
        self.tree.column("time", width=80, anchor="center")

        self.tree.heading("check", text="–ù–æ–º–µ—Ä —á–µ–∫–∞")
        self.tree.column("check", width=100, anchor="center")

        self.tree.heading("name", text="–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è")
        self.tree.column("name", width=300, anchor="w", stretch=True)

        self.tree.heading("amount", text="–°—É–º–∞ (–≥—Ä–Ω)")
        self.tree.column("amount", width=90, anchor="e")

        self.tree.heading("type", text="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó")
        self.tree.column("type", width=100, anchor="center")

        self.tree.pack(padx=10, pady=5, fill="both", expand=True)


        self.log_text = tk.Text(self.root, height=6, state="disabled", bg="black", fg="white", wrap="word")
        self.log_text.pack(fill="both", padx=10, pady=(0, 10))

    def select_zip(self):
        zip_path = filedialog.askopenfilename(filetypes=[("ZIP –∞—Ä—Ö—ñ–≤", "*.zip")])
        if not zip_path:
            return

        self.sales_data.clear()
        self.tree.delete(*self.tree.get_children())

        self.temp_dir = tempfile.mkdtemp()
        log_message(self.log_text, f"üì¶ –û–±—Ä–∞–Ω–æ –∞—Ä—Ö—ñ–≤: {zip_path}")

        try:
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(self.temp_dir)
            log_message(self.log_text, f"‚úÖ –†–æ–∑–ø–∞–∫–æ–≤–∞–Ω–æ –¥–æ: {self.temp_dir}")
        except zipfile.BadZipFile:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "ZIP-—Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ –∞–±–æ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")
            return


        files = [f for f in os.listdir(self.temp_dir) if f.endswith(".xml")]
        total = len(files)
        if total == 0:
            log_message(self.log_text, "‚ùå XML-—Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ —É ZIP.")
            return

        log_message(self.log_text, f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {total} XML-—Ñ–∞–π–ª—ñ–≤. –ü–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É...")
        self.progress_var.set(0)
        self.progress.update()

        for idx, filename in enumerate(files, 1):
            file_path = os.path.join(self.temp_dir, filename)
            self.parse_file(file_path)
            self.progress_var.set((idx / total) * 100)
            self.progress.update()
            log_message(self.log_text, f"üóÇ –û–±—Ä–æ–±–ª–µ–Ω–æ: {filename}")

        for row in self.sales_data:
            self.tree.insert("", "end", values=row)

        if self.sales_data:
            self.export_btn.config(state="normal")
            log_message(self.log_text, "‚úÖ –í—Å—ñ —Ñ–∞–π–ª–∏ –æ–±—Ä–æ–±–ª–µ–Ω–æ.")
        else:
            log_message(self.log_text, "‚ö†Ô∏è –§–∞–π–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ, –∞–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á–µ–∫—ñ–≤.")

    def parse_file(self, filepath):
        try:
            with open(filepath, encoding="utf-8") as f:
                content = f.read()

            dat_blocks = re.findall(r'<DAT.*?</DAT>', content, re.DOTALL)

            for block in dat_blocks:
                fake_xml = f"<root>{block}</root>"
                try:
                    root = ET.fromstring(fake_xml)

                    for c_block in root.findall(".//C"):
                        items = c_block.findall(".//P")
                        e = c_block.find(".//E")
                        
                        if e is None:
                            continue  # –µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–∫–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                        ts = e.attrib.get("TS", "")
                        check_no = e.attrib.get("NO", "")
                        
                        if ts and len(ts) == 14:
                            date = f"{ts[:4]}-{ts[4:6]}-{ts[6:8]}"
                            time_str = f"{ts[8:10]}:{ts[10:12]}:{ts[12:]}"
                        else:
                            date = "–ù–µ–≤—ñ–¥–æ–º–æ"
                            time_str = ""

                        for item in items:
                            name = item.attrib.get("NM", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
                            amount_raw = int(item.attrib.get("SM", 0))
                            amount = abs(amount_raw) / 100
                            operation_type = "–ü—Ä–æ–¥–∞–∂" if amount_raw >= 0 else "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è"

                            self.sales_data.append((date, time_str, check_no, name, f"{amount:.2f}", operation_type))

                except ET.ParseError as e:
                    log_message(self.log_text, f"‚ùå –ü–æ–º–∏–ª–∫–∞ XML —É {os.path.basename(filepath)}: {e}", level="ERROR")

        except Exception as e:
            log_message(self.log_text, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {os.path.basename(filepath)}: {e}", level="ERROR")

    def export_to_excel(self):
        if not self.sales_data:
            return

        save_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel —Ñ–∞–π–ª–∏", "*.xlsx")])
        if not save_path:
            return

        df = pd.DataFrame(self.sales_data, columns=["–î–∞—Ç–∞", "–ß–∞—Å", "–ù–æ–º–µ—Ä —á–µ–∫–∞", "–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", "–°—É–º–∞ (–≥—Ä–Ω)", "–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó"])
        df = df.sort_values(by=["–î–∞—Ç–∞", "–ß–∞—Å"])

        output_rows = []
        for date, group in df.groupby("–î–∞—Ç–∞"):
            output_rows.extend(group.values.tolist())

            total_sales = group[group["–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó"] == "–ü—Ä–æ–¥–∞–∂"]["–°—É–º–∞ (–≥—Ä–Ω)"].astype(float).sum()
            total_returns = group[group["–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó"] == "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è"]["–°—É–º–∞ (–≥—Ä–Ω)"].astype(float).sum()
            balance = total_sales - total_returns

            output_rows.append(["", "", "", "–Ü—Ç–æ–≥–æ (–ø—Ä–æ–¥–∞–∂—ñ)", f"{total_sales:.2f}", ""])
            output_rows.append(["", "", "", "–Ü—Ç–æ–≥–æ (–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è)", f"{total_returns:.2f}", ""])
            output_rows.append(["", "", "", "–ë–∞–ª–∞–Ω—Å", f"{balance:.2f}", ""])
            output_rows.append(["", "", "", "", "", ""])

        export_df = pd.DataFrame(output_rows, columns=["–î–∞—Ç–∞", "–ß–∞—Å", "–ù–æ–º–µ—Ä —á–µ–∫–∞", "–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", "–°—É–º–∞ (–≥—Ä–Ω)", "–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó"])

        try:
            export_df.to_excel(save_path, index=False)
        except PermissionError:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —É Excel.")
            return

        wb = load_workbook(save_path)
        ws = wb.active
        red_fill = PatternFill(start_color="FF9999", end_color="FF9999", fill_type="solid")

        for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
            if row[5].value == "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è":
                for cell in row:
                    cell.fill = red_fill

        wb.save(save_path)
        log_message(self.log_text, f"üíæ Excel-—Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {save_path}")

        if messagebox.askyesno("–ì–æ—Ç–æ–≤–æ", "–§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞—Ä–∞–∑?"):
            try:
                os.startfile(save_path)
            except Exception:
                messagebox.showwarning("–£–≤–∞–≥–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.")

        if self.temp_dir and os.path.exists(self.temp_dir):
            if messagebox.askyesno("–û—á–∏—â–µ–Ω–Ω—è", "–û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏?"):
                try:
                    shutil.rmtree(self.temp_dir)
                    log_message(self.log_text, "üßπ –¢–∏–º—á–∞—Å–æ–≤—É –ø–∞–ø–∫—É –æ—á–∏—â–µ–Ω–æ.")
                    self.temp_dir = None
                except Exception as e:
                    messagebox.showwarning("–£–≤–∞–≥–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏.\n{e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = SalesParserApp(root)
    root.mainloop()
